#!/usr/bin/env ruby

# cloudfiles-nukem
#
# original by: Stephen Eley (sfeley@gmail.com)
# improved by: Robert LaThanh
# CloudFiles version by: Ben Hathaway
#
# A script to delete Rackspace CloudFiles containers (or a set of files within containers) with many objects (millions) quickly by
# using multiple threads to retrieve and delete the individual objects.
#
# https://github.com/hathaway/cloudfiles-nukem
#
# Licensed under the Apache License v2.0 (http://apache.org/licenses)

require 'rubygems'
require 'optparse'
require 'logger'
require 'thread'
begin
  	require 'cloudfiles'
rescue LoadError
  	puts "Missing the cloudfiles gem! Try: sudo gem install cloudfiles"
end

username = nil
api_key = nil
thread_count = 10
max_queue = 10 * 1000
prefix = ''
STDOUT.sync = true

buckets = []

# Parse the command line
begin
  	opts = OptionParser.new
  	opts.banner = "Usage: #{$PROGRAM_NAME} [options] buckets..."
  	opts.separator ''
  	opts.separator 'Options:'
  	opts.on('-u',
          	'--user USERNAME',
          	String,
          	'Rackspace CloudFiles Username (required)') {|value| username = value}
  	opts.on('-k',
          	'--key SECRET',
          	String,
          	'Rackspace API Key (required)') {|key| api_key = key}
  	opts.on('-f',
			'--prefix PREFIX',
        	String,
        	'Pass a prefix to search for objects that start with a certain string that you want deleted (defaults to deleting entire container)') do |val|
				prefix = val
			end
  	opts.on('-t',
          	'--threads COUNT',
          	Integer,
          	"Number of simultaneous threads (default #{thread_count})") do |val|
            	thread_count = val
            	max_queue = val * 1000
          	end
  	opts.on('-h', '--help', 'Show this message') do
    	puts opts
    	exit
  	end
  	opts.separator ''
  	opts.separator ''
  	containers_to_delete = opts.parse(ARGV)
  	if containers_to_delete.empty?
    	puts "You must specify at least one container to delete!"
    	puts opts
    	exit
  	end
  	unless username and api_key
    	puts "The --user and --key options are required!"
    	puts opts
    	exit
  	end
rescue OptionParser::ParseError
  	puts "Oops... #{$!}"
  	puts opts
  	exit
end

# Make a connection for bucket deletion
log = Logger.new(STDOUT)
log.level = Logger::ERROR
cloudfiles = CloudFiles::Connection.new(:username => username, :api_key => api_key)
begin
  	cloudfiles.containers  # Confirm credentials
rescue Exception => e
	puts "Unable to get containers. Check your username and api key."
	puts e.message
  	puts opts
  	exit
end

containers_to_delete.each do |container_to_delete|
  	puts "DELETING: #{container_to_delete} with #{username} and #{api_key} in the filter #{filter}"

  	# Thread management
  	threads = []
  	queue = Queue.new
  	mutex_total = Mutex.new

  	# Tracking variables
  	total_listed = 0
  	total_deleted = 0

  	# Key retrieval thread
  	threads << Thread.new do
    	Thread.current[:number] = "CATALOG"
    	puts "Starting catalog thread..."
    	cf = CloudFiles::Connection.new(:username => username, :api_key => api_key)
    	marker = ''
    	begin
      		while queue.length > max_queue
        		sleep 1
      		end
			
			container = cf.container(container_to_delete)
			keys = container.objects(:limit => 1000, :marker => marker, :prefix => prefix)
			marker = keys.last[:key] unless keys.empty?
    		keys.each do |key|
       			queue.enq(key[:key])
        		total_listed += 1
    		end
    	end until keys.empty?
    	thread_count.times {queue.enq(:END_OF_CONTAINER)}
	end

  	start_time = Time.now
  	thread_count.times do |count|
    	threads << Thread.new(count) do |number|
      		Thread.current[:number] = number
      		puts "Starting deletion thread #{number}..."
      		cf = CloudFiles::Connection.new(:username => username, :api_key => api_key)
      		begin
        		key = queue.deq
        		unless key == :END_OF_CONTAINER
		  			container = cf.container(container_to_delete)
					container.delete_object(key)
          			mutex_total.synchronize {total_deleted += 1}
          			if (rand(1000) == 1)
						puts "Deleting #{key}"
            			elapsed = Time.now - start_time
            			puts "#{elapsed}: Deleted #{total_deleted} out of #{total_listed}"
          			end
        		end
      		end until (key == :END_OF_CONTAINER)
    	end
  	end

  	threads.each do |t|
    	begin
      		t.join
    	rescue RuntimeError => e
      		puts "Failure on thread #{t[:number]}: #{e.message}"
    	end
  	end

  	# Clean up any stragglers and kill the container
  	if prefix == ''
  		puts "Container #{container_to_delete} deleted!" if cloudfiles.delete_container(container_to_delete)
  	else
		puts "Files in #{container_to_delete} deleted with prefix #{prefix}!"
  	end
  	puts
end
